'.source.js.jsx':
  'import React':
    'prefix': 'imr'
    'body': """
      import React from 'react';
      ${1}
    """
  'import PropTypes':
    'prefix': 'im'
    'body': """
      import PropTypes from 'prop-types';
      ${1}
    """
  'import lodash':
    'prefix': 'iml'
    'body': """
      import _ from 'lodash';
      ${1}
    """
  'import api':
    'prefix': 'imapi'
    'body': """
      import Api from '#api';
      ${1}
    """
  'import component':
    'prefix': 'imc'
    'body': """
      import ${1} from '#components/${1}';
      ${1}
    """
  'import component guideline':
    'prefix': 'imcgl'
    'body': """
      import ${1} from '#guideline/components/${1}';
      ${1}
    """
  'import container':
    'prefix': 'imco'
    'body': """
      import ${1} from '#containers/${1}';
      ${1}
    """
  'import container guideline':
    'prefix': 'imcogl'
    'body': """
    import ${1} from '#guideline/containers/${1}';
    ${1}
    """
  'import reducer':
    'prefix': 'imred'
    'body': """
      import ${1} from '#reducers/${1}';
      ${1}
    """
  'import reducer guideline':
    'prefix': 'imredgl'
    'body': """
    import ${1} from '#guideline/reducers/${1}';
    ${1}
    """
  'import action':
    'prefix': 'imact'
    'body': """
      import ${1} from '#actions/${1}';
      ${1}
    """
  'import action guideline':
    'prefix': 'imactgl'
    'body': """
    import ${1} from '#guideline/actions/${1}';
    ${1}
    """
  'import effect':
    'prefix': 'imeff'
    'body': """
      import ${1} from '#effects/${1}';
      ${1}
    """
  'import effect guideline':
    'prefix': 'imeffgl'
    'body': """
    import ${1} from '#guideline/effects/${1}';
    ${1}
    """
  'import selector':
    'prefix': 'imsel'
    'body': """
      import ${1} from '#selectors/${1}';
      ${1}
    """
  'import selector guideline':
    'prefix': 'imselgl'
    'body': """
    import ${1} from '#guideline/selectors/${1}';
    ${1}
    """
  'import style':
    'prefix': 'ipmst'
    'body': """
      import _style${1} from './style';
      ${3}
    """

  'import ReactDom':
    'prefix': 'imrd'
    'body': """
      import ReactDom from 'react-dom';
      ${1}
    """

  'React ES7 Component':
    'prefix': 'rc'
    'body': """
      import React from 'react';


      export default class ${1:MyComponent} extends React.Component {
        static propTypes = {
          ${2:style: PropTypes.shape({}),}
        }

        render() {
          return (
            ${3:<View></View>}
          );
        }
      }
    """

  'React native ES7 style':
    'prefix': 'rst'
    'body': """
    import { StyleSheet } from 'react-native';

    export default StyleSheet.create({
      ${1:view}: {
        ${2}
      },
    });

    """

  'React ES7 Component':
    'prefix': 'rcp'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';


      export default class ${1:MyComponent} extends React.PureComponent {

        static propTypes = {
          ${2:style: PropTypes.shape({}),}
        };

        render() {
          return (
            ${3:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Component with Constructor':
    'prefix': 'rcc'
    'body': """
      import React, { Component } from 'react';


      export default class ${1:MyComponent} extends Component {

        constructor(props) {
          super(props);

          this.state = {
            ${3}
          };
        }

        render() {
          return (
            ${4:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Component with Constructor':
    'prefix': 'rccp'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';


      export default class ${1:MyComponent} extends Component {

        static propTypes = {
          ${2}
        };

        constructor(props) {
          super(props);

          this.state = {
            ${3}
          };
        }

        render() {
          return (
            ${4:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Redux Container':
    'prefix': 'rcr'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';


      class ${1:MyComponent} extends React.Component {

        static propTypes = {
          ${4}
        };


        render() {
          return (
            ${6:<div>MyComponent</div>}
          );
        }

      }

      const mapStateToProps = (state) => ({
        ${2}
      });

      const mapDispatchToProps = (dispatch) => ({
        ${3}
      });

      export default connect(mapStateToProps, mapDispatchToProps)(${1:MyComponent});
    """

  'React ES7 Redux Container Decorator':
    'prefix': 'rcrd'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';


      @connect(
        state => ({ ${2} }),
      )
      export default class ${1:MyComponent} extends React.Component {

        static propTypes = {
          ${3}
        };

        render() {
          return (
            ${4:<View>MyComponent</View>}
          );
        }

      }
    """

  'React ES7 Functional Component':
    'prefix': 'rfc'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';

      const propTypes = {
        ${2:style: PropTypes.shape({})}
      };

      const ${1} = ({${3}}) => {
        return (
          ${4:<View>MyComponent</View>}
        );
      }

      ${1}.propTypes = propTypes;


    """

  'React ES7 Constructor':
    'prefix': 'rconst'
    'body': """
      constructor(props) {
        super(props);

        ${1}
      }
    """

  'React componentWillMount (ES7)':
    'prefix': 'cwm'
    'body': """
      componentWillMount() {
        ${1}
      }
    """

  'React componentDidMount (ES7)':
    'prefix': 'cdm'
    'body': """
      componentDidMount() {
        ${1}
      }
    """

  'React componentWillReceiveProps (ES7)':
    'prefix': 'cwr'
    'body': """
      componentWillReceiveProps(nextProps) {
        ${1}
      }
    """

  'React shouldComponentUpdate (ES7)':
    'prefix': 'scu'
    'body': """
      shouldComponentUpdate(nextProps, nextState) {
        ${1}
      }
    """

  'React componentWillUpdate (ES7)':
    'prefix': 'cwu'
    'body': """
      componentWillUpdate(nextProps, nextState) {
        ${1}
      }
    """

  'React componentDidUpdate (ES7)':
    'prefix': 'cdu'
    'body': """
      componentDidUpdate(prevProps, prevState) {
        ${1}
      }
    """

  'React componentWillUnmount (ES7)':
    'prefix': 'cwun'
    'body': """
      componentWillUnmount() {
        ${1}
      }
    """

  'React this.props':
    'prefix': 'xprop'
    'body': """
      const {
        ${1}
      } = this.props;
    """

  'React this.state':
    'prefix': 'xstate'
    'body': """
      const {
        ${1}
      } = this.state;
    """

  'React static defaultProps = { ... } (ES7)':
    'prefix': 'dp'
    'body': """
      static defaultProps = {
        ${1}
      };
    """

  'React static propTypes = { ... } (ES7)':
    'prefix': 'pt'
    'body': """
      static propTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React static previewProps = { ... } (ES7)':
    'prefix': 'pp'
    'body': """
      static previewProps = {
        ${1}: ${2:string},
      };
    """

  'React setState({ ... }) (ES7)':
    'prefix': 'sst'
    'body': """
      this.setState({
        ${1}: ${2},
      });
    """

  # PropType array
  'PropTypes.array':
    'prefix': 'pta'
    'body': 'PropTypes.array'
  'PropTypes.array.isRequired':
    'prefix': 'ptar'
    'body': 'PropTypes.array.isRequired'

  # PropType bool
  'PropTypes.bool':
    'prefix': 'ptb'
    'body': 'PropTypes.bool'
  'PropTypes.bool.isRequired':
    'prefix': 'ptbr'
    'body': 'PropTypes.bool.isRequired'

  # PropType function
  'PropTypes.func':
    'prefix': 'ptf'
    'body': 'PropTypes.func'
  'PropTypes.func.isRequired':
    'prefix': 'ptfr'
    'body': 'PropTypes.func.isRequired'

  # PropType number
  'PropTypes.number':
    'prefix': 'ptn'
    'body': 'PropTypes.number'
  'PropTypes.number.isRequired':
    'prefix': 'ptnr'
    'body': 'PropTypes.number.isRequired'

  # PropType object
  'PropTypes.object':
    'prefix': 'ptobj'
    'body': 'PropTypes.object'
  'PropTypes.object.isRequired':
    'prefix': 'ptobjr'
    'body': 'PropTypes.object.isRequired'

  # PropType string
  'PropTypes.string':
    'prefix': 'pts'
    'body': 'PropTypes.string'
  'PropTypes.string.isRequired':
    'prefix': 'ptsr'
    'body': 'PropTypes.string.isRequired'

  # PropType node
  'PropTypes.node':
    'prefix': 'ptnode'
    'body': 'PropTypes.node'
  'PropTypes.node.isRequired':
    'prefix': 'ptnoder'
    'body': 'PropTypes.node.isRequired'

  # PropType element
  'PropTypes.element':
    'prefix': 'pte'
    'body': 'PropTypes.element'
  'PropTypes.element.isRequired':
    'prefix': 'pter'
    'body': 'PropTypes.element.isRequired'

  # PropType instanceOf
  'PropTypes.instanceOf':
    'prefix': 'pti'
    'body': 'PropTypes.instanceOf(${1})'
  'PropTypes.instanceOf.isRequired':
    'prefix': 'ptir'
    'body': 'PropTypes.instanceOf(${1}).isRequired'

  # PropType oneOf
  'PropTypes.oneOf':
    'prefix': 'ptof'
    'body': 'PropTypes.oneOf([${1}])'
  'PropTypes.oneOf.isRequired':
    'prefix': 'ptofr'
    'body': 'PropTypes.oneOf([${1}]).isRequired'

  # PropType oneOfType
  'PropTypes.oneOfType':
    'prefix': 'ptoft'
    'body': """
      PropTypes.oneOfType([
        ${1}
      ])
    """
  'PropTypes.oneOfType.isRequired':
    'prefix': 'ptoftr'
    'body': """
      PropTypes.oneOfType([
        ${1}
      ]).isRequired
    """

  # PropType arrayOf
  'PropTypes.arrayOf':
    'prefix': 'ptao'
    'body': 'PropTypes.arrayOf(${1})'
  'PropTypes.arrayOf.isRequired':
    'prefix': 'ptaor'
    'body': 'PropTypes.arrayOf(${1}).isRequired'

  # PropType objectOf
  'PropTypes.objectOf':
    'prefix': 'ptobjo'
    'body': 'PropTypes.objectOf(${1})'
  'PropTypes.objectOf.isRequired':
    'prefix': 'ptobjor'
    'body': 'PropTypes.objectOf(${1}).isRequired'

  # PropType shape
  'PropTypes.shape({...})':
    'prefix': 'ptsh'
    'body': """
      PropTypes.shape({
        ${1}
      })
    """
  'PropTypes.shape({...}).isRequired':
    'prefix': 'ptshaper'
    'body': """
      PropTypes.shape({
        ${1}
      }).isRequired
    """

  # PropType any
  'PropTypes.any':
    'prefix': 'ptany'
    'body': 'PropTypes.any'
  'PropTypes.any.isRequired':
    'prefix': 'ptanyr'
    'body': 'PropTypes.any.isRequired'
  # PropType img
  'PropTypes.img':
    'prefix': 'ptimg'
    'body': 'PropTypes.image'
  'PropTypes.img.isRequired':
    'prefix': 'ptimgr'
    'body': 'PropTypes.image.isRequired'
  # PropType children
  'PropTypes.children':
    'prefix': 'ptc'
    'body': 'PropTypes.children'
  'PropTypes.children.isRequired':
    'prefix': 'ptcr'
    'body': 'PropTypes.children.isRequired'



  'React redux reducer (ES7)':
    'prefix': 'rrdx'
    'body': """
import { handleActions } from 'redux-actions';

import * as ${1} from '#actions/quote';
import * as ${1} from '#actions/${2}';

const INITIAL_STATE = {
  ${3}
};

export default handleActions({
  [${1}.${4}]: (state, { payload }) => ({
    ...state,
    ${6},
  }),
}, INITIAL_STATE);

    """

  'React redux actions (ES7)':
    'prefix': 'rrdxa'
    'body': """
import { createAction } from 'redux-actions';

export const ${2} = '${1}_${2}';

const ${3} = createAction(${2});

export default {
  ${3},
};

    """

  'React redux action':
    'prefix': 'rrdxa1'
    'body': """
export const ${2} = '${1}_${2}';

const ${3} = createAction(${2});
    """

  'React redux  api action':
    'prefix': 'rrdxapi'
    'body': """
import { generateApiAction, createApiAction } from '#guideline/utils/api';

export const ${2} = generateApiAction('${1}_${2}');

const ${3} = createApiAction(${2});

export default {
  ${3},
};
    """
  'React redux  api action':
    'prefix': 'rrdxapi1'
    'body': """
export const ${2} = generateApiAction('${1}_${2}');

const ${3} = createApiAction(${2});
    """

  'React redux effects (ES7)':
    'prefix': 'rrdxe'
    'body': """
import Api from '#api';

import ${1}Actions from '#actions/${1}';

const ${2} = data => (dispatch) => {
  return dispatch(${1}Actions.${2}(Api.${3:get}('/${4}')));
};

export default {
  ${2},
};

    """
